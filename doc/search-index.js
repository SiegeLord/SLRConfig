var N = null;var searchIndex = {};

searchIndex["quote"]={"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",N,N],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",N,N],[12,"0","","",0,N],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",N,N],[12,"0","","",1,N],[3,"Ident","","An identifier that should be interpolated without quotes.",N,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["tokens"]]],[11,"eq","","",2,[[["self"],["tokens"]],["bool"]]],[11,"ne","","",2,[[["self"],["tokens"]],["bool"]]],[11,"new","","Empty tokens.",2,[[],["self"]]],[11,"append","","For use by `ToTokens` implementations.",2,[[["self"],["t"]]]],[11,"append_all","","For use by `ToTokens` implementations.",2,[[["self"],["i"]]]],[11,"append_separated","","For use by `ToTokens` implementations.",2,[[["self"],["i"],["s"]]]],[11,"append_terminated","","For use by `ToTokens` implementations.",2,[[["self"],["i"],["s"]]]],[11,"as_str","","",2,[[["self"]],["str"]]],[11,"into_string","","",2,[[["self"]],["string"]]],[11,"parse","","",2,[[["self"]],["result"]]],[11,"default","","",2,[[],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"as_ref","","",2,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"to_tokens","","",0,[[["self"],["tokens"]]]],[11,"to_tokens","","",2,[[["self"],["tokens"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"to_tokens","","",1,[[["self"],["tokens"]]]],[11,"to_tokens","","",1,[[["self"],["tokens"]]]],[11,"to_tokens","","",1,[[["self"],["tokens"]]]],[11,"to_tokens","","",1,[[["self"],["tokens"]]]],[11,"to_tokens","","",1,[[["self"],["tokens"]]]],[11,"to_tokens","","",1,[[["self"],["tokens"]]]],[11,"to_tokens","","",1,[[["self"],["tokens"]]]],[11,"to_tokens","","",1,[[["self"],["tokens"]]]],[11,"to_tokens","","",1,[[["self"],["tokens"]]]],[11,"to_tokens","","",1,[[["self"],["tokens"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["ident"]]],[11,"hash","","",3,N],[11,"new","","",3,[[["t"]],["self"]]],[11,"from","","",3,[[["str"]],["self"]]],[11,"from","","",3,[[["cow",["str"]]],["self"]]],[11,"from","","",3,[[["string"]],["self"]]],[11,"as_ref","","",3,[[["self"]],["str"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",3,[[["self"],["t"]],["bool"]]],[11,"to_tokens","","",3,[[["self"],["tokens"]]]],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",N,N],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,[[["self"],["tokens"]]]],[14,"quote","","The whole point.",N,N],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["serde"]={"doc":"Serde","items":[[0,"ser","serde","Generic data structure serialization framework.",N,N],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",N,N],[11,"serialize_element","","",0,[[["self"],["t"]],["result"]]],[11,"end","","",0,[[["self"]],["result"]]],[11,"serialize_element","","",0,[[["self"],["t"]],["result"]]],[11,"end","","",0,[[["self"]],["result"]]],[11,"serialize_field","","",0,[[["self"],["t"]],["result"]]],[11,"end","","",0,[[["self"]],["result"]]],[11,"serialize_field","","",0,[[["self"],["t"]],["result"]]],[11,"end","","",0,[[["self"]],["result"]]],[11,"serialize_key","","",0,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",0,[[["self"],["t"]],["result"]]],[11,"end","","",0,[[["self"]],["result"]]],[11,"serialize_field","","",0,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",0,[[["self"]],["result"]]],[11,"serialize_field","","",0,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",0,[[["self"]],["result"]]],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",N,N],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",1,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",2,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,N],[16,"Error","","The error type when some error occurs during serialization.",3,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,N],[10,"serialize_bool","","Serialize a `bool` value.",3,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",3,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",3,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",3,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",3,[[["self"],["i64"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",3,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",3,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",3,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",3,[[["self"],["u64"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",3,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",3,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",3,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",3,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,N],[10,"serialize_none","","Serialize a [`None`] value.",3,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",3,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",3,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",3,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,[[["self"],["t"]],["result"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",4,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",4,N],[10,"serialize_element","","Serialize a sequence element.",4,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",4,[[["self"]],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",5,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",5,N],[10,"serialize_element","","Serialize a tuple element.",5,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",5,[[["self"]],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",6,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",6,N],[10,"serialize_field","","Serialize a tuple struct field.",6,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",6,[[["self"]],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",7,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",7,N],[10,"serialize_field","","Serialize a tuple variant field.",7,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",7,[[["self"]],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",8,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",8,N],[10,"serialize_key","","Serialize a map key.",8,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",8,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",8,[[["self"],["k"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",8,[[["self"]],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",9,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",9,N],[10,"serialize_field","","Serialize a struct field.",9,[[["self"],["str"],["t"]],["result"]]],[10,"end","","Finish serializing a struct.",9,[[["self"]],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",10,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",10,N],[10,"serialize_field","","Serialize a struct variant field.",10,[[["self"],["str"],["t"]],["result"]]],[10,"end","","Finish serializing a struct variant.",10,[[["self"]],["result"]]],[0,"de","serde","Generic data structure deserialization framework.",N,N],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",N,N],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",N,N],[13,"Bool","","The input contained a boolean value that was not expected.",11,N],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",11,N],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",11,N],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",11,N],[13,"Char","","The input contained a `char` that was not expected.",11,N],[13,"Str","","The input contained a `&str` or `String` that was not expected.",11,N],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",11,N],[13,"Unit","","The input contained a unit `()` that was not expected.",11,N],[13,"Option","","The input contained an `Option<T>` that was not expected.",11,N],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",11,N],[13,"Seq","","The input contained a sequence that was not expected.",11,N],[13,"Map","","The input contained a map that was not expected.",11,N],[13,"Enum","","The input contained an enum that was not expected.",11,N],[13,"UnitVariant","","The input contained a unit variant that was not expected.",11,N],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",11,N],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",11,N],[13,"StructVariant","","The input contained a struct variant that was not expected.",11,N],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",11,N],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",N,N],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"UnitDeserializer","","A deserializer holding a `()`.",N,N],[3,"BoolDeserializer","","A deserializer holding a `bool`.",N,N],[3,"I8Deserializer","","A deserializer holding an `i8`.",N,N],[3,"I16Deserializer","","A deserializer holding an `i16`.",N,N],[3,"I32Deserializer","","A deserializer holding an `i32`.",N,N],[3,"I64Deserializer","","A deserializer holding an `i64`.",N,N],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",N,N],[3,"U8Deserializer","","A deserializer holding a `u8`.",N,N],[3,"U16Deserializer","","A deserializer holding a `u16`.",N,N],[3,"U64Deserializer","","A deserializer holding a `u64`.",N,N],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",N,N],[3,"F32Deserializer","","A deserializer holding an `f32`.",N,N],[3,"F64Deserializer","","A deserializer holding an `f64`.",N,N],[3,"CharDeserializer","","A deserializer holding a `char`.",N,N],[3,"U32Deserializer","","A deserializer holding a `u32`.",N,N],[3,"StrDeserializer","","A deserializer holding a `&str`.",N,N],[3,"StringDeserializer","","A deserializer holding a `String`.",N,N],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",N,N],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",N,N],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",N,N],[3,"MapDeserializer","","A deserializer that iterates over a map.",N,N],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",N,N],[11,"clone","","",12,[[["self"]],["error"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["error"]],["bool"]]],[11,"ne","","",12,[[["self"],["error"]],["bool"]]],[11,"custom","","",12,[[["t"]],["self"]]],[11,"custom","","",12,[[["t"]],["self"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",12,[[["self"]],["str"]]],[11,"clone","","",13,[[["self"]],["unitdeserializer"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",13,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",13,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",13,N],[11,"deserialize_enum","","",13,N],[11,"deserialize_identifier","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",13,[[["self"],["v"]],["result"]]],[11,"clone","","",14,[[["self"]],["booldeserializer"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",14,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",14,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",14,N],[11,"deserialize_enum","","",14,N],[11,"deserialize_identifier","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",14,[[["self"],["v"]],["result"]]],[11,"clone","","",15,[[["self"]],["i8deserializer"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",15,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",15,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",15,N],[11,"deserialize_enum","","",15,N],[11,"deserialize_identifier","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",15,[[["self"],["v"]],["result"]]],[11,"clone","","",16,[[["self"]],["i16deserializer"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",16,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",16,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",16,N],[11,"deserialize_enum","","",16,N],[11,"deserialize_identifier","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",16,[[["self"],["v"]],["result"]]],[11,"clone","","",17,[[["self"]],["i32deserializer"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",17,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",17,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",17,N],[11,"deserialize_enum","","",17,N],[11,"deserialize_identifier","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",17,[[["self"],["v"]],["result"]]],[11,"clone","","",18,[[["self"]],["i64deserializer"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",18,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",18,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",18,N],[11,"deserialize_enum","","",18,N],[11,"deserialize_identifier","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",18,[[["self"],["v"]],["result"]]],[11,"clone","","",19,[[["self"]],["isizedeserializer"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",19,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",19,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",19,N],[11,"deserialize_enum","","",19,N],[11,"deserialize_identifier","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",19,[[["self"],["v"]],["result"]]],[11,"clone","","",20,[[["self"]],["u8deserializer"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",20,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",20,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",20,N],[11,"deserialize_enum","","",20,N],[11,"deserialize_identifier","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",20,[[["self"],["v"]],["result"]]],[11,"clone","","",21,[[["self"]],["u16deserializer"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",21,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",21,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",21,N],[11,"deserialize_enum","","",21,N],[11,"deserialize_identifier","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",21,[[["self"],["v"]],["result"]]],[11,"clone","","",22,[[["self"]],["u64deserializer"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",22,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",22,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",22,N],[11,"deserialize_enum","","",22,N],[11,"deserialize_identifier","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",22,[[["self"],["v"]],["result"]]],[11,"clone","","",23,[[["self"]],["usizedeserializer"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",23,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",23,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",23,N],[11,"deserialize_enum","","",23,N],[11,"deserialize_identifier","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",23,[[["self"],["v"]],["result"]]],[11,"clone","","",24,[[["self"]],["f32deserializer"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",24,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",24,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",24,N],[11,"deserialize_enum","","",24,N],[11,"deserialize_identifier","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",24,[[["self"],["v"]],["result"]]],[11,"clone","","",25,[[["self"]],["f64deserializer"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",25,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",25,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",25,N],[11,"deserialize_enum","","",25,N],[11,"deserialize_identifier","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",25,[[["self"],["v"]],["result"]]],[11,"clone","","",26,[[["self"]],["chardeserializer"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",26,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",26,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",26,N],[11,"deserialize_enum","","",26,N],[11,"deserialize_identifier","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",26,[[["self"],["v"]],["result"]]],[11,"clone","","",27,[[["self"]],["u32deserializer"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"deserialize_bool","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",27,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",27,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",27,N],[11,"deserialize_identifier","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",27,N],[11,"variant_seed","","",27,[[["self"],["t"]],["result"]]],[11,"clone","","",28,[[["self"]],["strdeserializer"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"deserialize_any","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",28,N],[11,"deserialize_bool","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",28,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",28,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",28,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",28,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",28,N],[11,"deserialize_identifier","","",28,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",28,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",28,[[["self"],["t"]],["result"]]],[11,"clone","","",29,[[["self"]],["stringdeserializer"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"deserialize_any","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",29,N],[11,"deserialize_bool","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",29,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",29,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",29,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",29,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",29,N],[11,"deserialize_identifier","","",29,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",29,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",29,[[["self"],["t"]],["result"]]],[11,"clone","","",30,[[["self"]],["cowstrdeserializer"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"deserialize_any","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",30,N],[11,"deserialize_bool","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",30,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",30,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",30,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",30,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",30,N],[11,"deserialize_identifier","","",30,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",30,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",30,[[["self"],["t"]],["result"]]],[11,"clone","","",31,[[["self"]],["seqdeserializer"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",31,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",31,[[["self"]],["result"]]],[11,"deserialize_any","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",31,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",31,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",31,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",31,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",31,N],[11,"deserialize_enum","","",31,N],[11,"deserialize_identifier","","",31,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",31,[[["self"],["v"]],["result"]]],[11,"next_element_seed","","",31,[[["self"],["v"]],["result",["option"]]]],[11,"size_hint","","",31,[[["self"]],["option",["usize"]]]],[11,"clone","","",32,[[["self"]],["seqaccessdeserializer"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",32,[[["a"]],["self"]]],[11,"deserialize_any","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",32,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",32,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",32,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",32,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",32,N],[11,"deserialize_enum","","",32,N],[11,"deserialize_identifier","","",32,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",32,[[["self"],["v"]],["result"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",33,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",33,[[["self"]],["result"]]],[11,"deserialize_any","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",33,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",33,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",33,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",33,N],[11,"deserialize_enum","","",33,N],[11,"deserialize_identifier","","",33,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",33,[[["self"],["v"]],["result"]]],[11,"next_key_seed","","",33,[[["self"],["t"]],["result",["option"]]]],[11,"next_value_seed","","",33,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",33,[[["self"],["tk"],["tv"]],["result",["option"]]]],[11,"size_hint","","",33,[[["self"]],["option",["usize"]]]],[11,"next_element_seed","","",33,[[["self"],["t"]],["result",["option"]]]],[11,"size_hint","","",33,[[["self"]],["option",["usize"]]]],[11,"clone","","",33,[[["self"]],["self"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"clone","","",34,[[["self"]],["mapaccessdeserializer"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",34,[[["a"]],["self"]]],[11,"deserialize_any","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",34,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",34,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",34,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",34,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",34,N],[11,"deserialize_enum","","",34,N],[11,"deserialize_identifier","","",34,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",34,[[["self"],["v"]],["result"]]],[11,"clone","serde::de","",35,[[["self"]],["ignoredany"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"default","","",35,[[],["ignoredany"]]],[11,"expecting","","",35,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",35,[[["self"],["bool"]],["result"]]],[11,"visit_i64","","",35,[[["self"],["i64"]],["result"]]],[11,"visit_u64","","",35,[[["self"],["u64"]],["result"]]],[11,"visit_f64","","",35,[[["self"],["f64"]],["result"]]],[11,"visit_str","","",35,[[["self"],["str"]],["result"]]],[11,"visit_none","","",35,[[["self"]],["result"]]],[11,"visit_some","","",35,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","",35,[[["self"],["d"]],["result"]]],[11,"visit_unit","","",35,[[["self"]],["result"]]],[11,"visit_seq","","",35,[[["self"],["a"]],["result"]]],[11,"visit_map","","",35,[[["self"],["a"]],["result"]]],[11,"visit_bytes","","",35,N],[11,"deserialize","","",35,[[["d"]],["result",["ignoredany"]]]],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",N,N],[10,"custom","","Raised when there is general error when deserializing a type.",36,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",36,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",36,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",36,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",36,N],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",36,N],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",36,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",36,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",N,N],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",37,[[["self"],["formatter"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",38,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",N,N],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",N,N],[16,"Value","","The type produced by using this seed.",39,N],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",39,[[["self"],["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",40,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",40,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",40,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",40,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",40,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",40,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",40,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",40,[[["self"],["v"]],["result"]]],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",N,N],[16,"Value","","The value produced by this visitor.",41,N],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",41,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",41,[[["self"],["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",41,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",41,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",41,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i32`.",41,[[["self"],["i64"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",41,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",41,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",41,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",41,[[["self"],["u64"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",41,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",41,[[["self"],["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",41,[[["self"],["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",41,[[["self"],["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",41,[[["self"],["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",41,[[["self"],["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",41,N],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",41,N],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",41,[[["self"],["vec",["u8"]]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",41,[[["self"]],["result"]]],[11,"visit_some","","The input contains an optional that is present.",41,[[["self"],["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",41,[[["self"]],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",41,[[["self"],["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",41,[[["self"],["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",41,[[["self"],["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",41,[[["self"],["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,N],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",42,[[["self"],["t"]],["result",["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",42,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",42,[[["self"]],["option",["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",43,N],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",43,[[["self"],["k"]],["result",["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",43,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",43,[[["self"],["k"],["v"]],["result",["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",43,[[["self"]],["result",["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",43,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",43,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",43,[[["self"]],["option",["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",44,N],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",44,N],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",44,[[["self"],["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to deserialize.",44,[[["self"]],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",45,N],[10,"unit_variant","","Called when deserializing a variant with no values.",45,[[["self"]],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",45,[[["self"],["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",45,[[["self"]],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",45,[[["self"],["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",45,N],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",N,N],[16,"Deserializer","","The type of the deserializer being converted into.",46,N],[10,"into_deserializer","","Convert this value into a deserializer.",46,N],[11,"clone","","",11,[[["self"]],["unexpected"]]],[11,"eq","","",11,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",11,[[["self"],["unexpected"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[8,"Serialize","serde","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",2,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,N],[16,"Error","","The error type when some error occurs during serialization.",3,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,N],[10,"serialize_bool","","Serialize a `bool` value.",3,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",3,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",3,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",3,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",3,[[["self"],["i64"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",3,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",3,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",3,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",3,[[["self"],["u64"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",3,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",3,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",3,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",3,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,N],[10,"serialize_none","","Serialize a [`None`] value.",3,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",3,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",3,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",3,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,[[["self"],["t"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",38,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",40,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",40,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",40,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",40,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",40,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",40,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",40,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",40,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",40,[[["self"],["v"]],["result"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",N,N],[11,"into","serde::ser","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"fmt","serde::de","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"into","serde::de::value","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]]],"paths":[[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"]]};
searchIndex["serde_derive"]={"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",N,[[["tokenstream"]],["tokenstream"]]],[5,"derive_deserialize","","",N,[[["tokenstream"]],["tokenstream"]]]],"paths":[]};
searchIndex["serde_derive_internals"]={"doc":"","items":[[3,"Ctxt","serde_derive_internals","",N,N],[0,"ast","","",N,N],[3,"Container","serde_derive_internals::ast","",N,N],[12,"ident","","",0,N],[12,"attrs","","",0,N],[12,"body","","",0,N],[12,"generics","","",0,N],[3,"Variant","","",N,N],[12,"ident","","",1,N],[12,"attrs","","",1,N],[12,"style","","",1,N],[12,"fields","","",1,N],[3,"Field","","",N,N],[12,"ident","","",2,N],[12,"attrs","","",2,N],[12,"ty","","",2,N],[4,"Body","","",N,N],[13,"Enum","","",3,N],[13,"Struct","","",3,N],[4,"Style","","",N,N],[13,"Struct","","",4,N],[13,"Tuple","","",4,N],[13,"Newtype","","",4,N],[13,"Unit","","",4,N],[11,"clone","","",4,[[["self"]],["style"]]],[11,"from_ast","","",0,[[["ctxt"],["macroinput"]],["container"]]],[11,"all_fields","","",3,[[["self"]],["box",["iterator"]]]],[11,"has_getter","","",3,[[["self"]],["bool"]]],[0,"attr","serde_derive_internals","",N,N],[3,"Name","serde_derive_internals::attr","",N,N],[3,"Container","","Represents container (e.g. struct) attribute information",N,N],[3,"Variant","","Represents variant attribute information",N,N],[3,"Field","","Represents field attribute information",N,N],[4,"RenameRule","","",N,N],[13,"None","","Don't apply a default rename rule.",5,N],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",5,N],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",5,N],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",5,N],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",5,N],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",5,N],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",5,N],[4,"EnumTag","","Styles of representing an enum.",N,N],[13,"External","","The default.",6,N],[13,"Internal","","`#[serde(tag = \"type\")]`",6,N],[12,"tag","serde_derive_internals::attr::EnumTag","",6,N],[13,"Adjacent","serde_derive_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",6,N],[12,"tag","serde_derive_internals::attr::EnumTag","",6,N],[12,"content","","",6,N],[13,"None","serde_derive_internals::attr","`#[serde(untagged)]`",6,N],[4,"Identifier","","Whether this enum represents the fields of a struct or the variants of an enum.",N,N],[13,"No","","It does not.",7,N],[13,"Field","","This enum represents the fields of a struct. All of the variants must be unit variants, except possibly one which is annotated with `#[serde(other)]` and is a newtype variant.",7,N],[13,"Variant","","This enum represents the variants of an enum. All of the variants must be unit variants.",7,N],[4,"Default","","Represents the default to use for a field when deserializing.",N,N],[13,"None","","Field must always be specified because it does not have a default.",8,N],[13,"Default","","The default is given by `std::default::Default::default()`.",8,N],[13,"Path","","The default is given by this function.",8,N],[5,"get_serde_meta_items","","",N,[[["attribute"]],["option",["vec"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"serialize_name","","Return the container name for the container when serializing.",9,[[["self"]],["string"]]],[11,"deserialize_name","","Return the container name for the container when deserializing.",9,[[["self"]],["string"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["identifier"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",10,[[["ctxt"],["macroinput"]],["self"]]],[11,"name","","",10,[[["self"]],["name"]]],[11,"rename_all","","",10,[[["self"]],["renamerule"]]],[11,"deny_unknown_fields","","",10,[[["self"]],["bool"]]],[11,"default","","",10,[[["self"]],["default"]]],[11,"ser_bound","","",10,[[["self"]],["option"]]],[11,"de_bound","","",10,[[["self"]],["option"]]],[11,"tag","","",10,[[["self"]],["enumtag"]]],[11,"from_type","","",10,[[["self"]],["option",["ty"]]]],[11,"into_type","","",10,[[["self"]],["option",["ty"]]]],[11,"remote","","",10,[[["self"]],["option",["path"]]]],[11,"identifier","","",10,[[["self"]],["identifier"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from_ast","","",11,[[["ctxt"],["variant"]],["self"]]],[11,"name","","",11,[[["self"]],["name"]]],[11,"rename_by_rule","","",11,[[["self"],["renamerule"]]]],[11,"rename_all","","",11,[[["self"]],["renamerule"]]],[11,"skip_deserializing","","",11,[[["self"]],["bool"]]],[11,"skip_serializing","","",11,[[["self"]],["bool"]]],[11,"other","","",11,[[["self"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["default"]],["bool"]]],[11,"ne","","",8,[[["self"],["default"]],["bool"]]],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",12,[[["ctxt"],["usize"],["field"]],["self"]]],[11,"name","","",12,[[["self"]],["name"]]],[11,"rename_by_rule","","",12,[[["self"],["renamerule"]]]],[11,"skip_serializing","","",12,[[["self"]],["bool"]]],[11,"skip_deserializing","","",12,[[["self"]],["bool"]]],[11,"skip_serializing_if","","",12,[[["self"]],["option",["path"]]]],[11,"default","","",12,[[["self"]],["default"]]],[11,"serialize_with","","",12,[[["self"]],["option",["path"]]]],[11,"deserialize_with","","",12,[[["self"]],["option",["path"]]]],[11,"ser_bound","","",12,[[["self"]],["option"]]],[11,"de_bound","","",12,[[["self"]],["option"]]],[11,"borrowed_lifetimes","","",12,[[["self"]],["btreeset"]]],[11,"getter","","",12,[[["self"]],["option",["path"]]]],[11,"default","serde_derive_internals","",13,[[],["ctxt"]]],[11,"new","","",13,[[],["self"]]],[11,"error","","",13,[[["self"],["t"]]]],[11,"check","","",13,[[["self"]],["result",["string"]]]],[11,"drop","","",13,[[["self"]]]],[11,"fmt","serde_derive_internals::attr","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["renamerule"]],["bool"]]],[11,"apply_to_variant","","",5,[[["self"],["str"]],["string"]]],[11,"apply_to_field","","",5,[[["self"],["str"]],["string"]]],[11,"from_str","","",5,[[["str"]],["result"]]],[11,"into","serde_derive_internals","",13,[[["self"]],["u"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into","serde_derive_internals::ast","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","serde_derive_internals::attr","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]]],"paths":[[3,"Container"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Identifier"],[4,"Default"],[3,"Name"],[3,"Container"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["slr_config"]={"doc":"This crate implements the parsing for the SLRConfig format. Basic usage revolves around the creation and use of the `ConfigElement` type, like so:","items":[[3,"Error","slr_config","The error type used throughout this crate.",N,N],[12,"kind","","",0,N],[12,"text","","",0,N],[4,"ErrorKind","","An enum describing the kind of the error, to allow treating different errors differenly.",N,N],[13,"ParseFailure","","A parse error has occured. This error is not recoverable.",1,N],[13,"InvalidRepr","","An object could not be parsed from its ConfigElement representation. This error is recoverable, but the value the the object is in an unspecified state.",1,N],[13,"UnknownField","","While parsing a struct from a table, an unknown field was found. This error is recoverable, and the struct is unaffected.",1,N],[13,"Custom","","A custom error available to 3rd party implementors. The semantics are defined by the 3rd party.",1,N],[3,"Source","","Annotated representation of the configuration source string.",N,N],[3,"ConfigElement","","A configuration element.",N,N],[4,"ConfigElementKind","","The kind of the configuration element.",N,N],[13,"Value","","A simple value, containing a string.",2,N],[13,"Table","","A table, which is a mapping of strings to configuration elements.",2,N],[13,"Array","","An array of configuration elements.",2,N],[5,"to_element","","Serialize a value to a ConfigElement.",N,[[["t"]],["result",["configelement","error"]]]],[11,"clone","","",3,[[["self"]],["configelement"]]],[11,"clone","","",2,[[["self"]],["configelementkind"]]],[11,"new_table","","Creates a new empty table.",3,[[],["configelement"]]],[11,"new_value","","Creates a new value.",3,[[["t"]],["configelement"]]],[11,"new_array","","Creates a new array.",3,[[],["configelement"]]],[11,"from_source","","Parses a source and returns a table. The source will be reset by this operation, and must not be used with any spans created from a previous parsing done with that source.",3,[[["source"]],["result",["configelement","error"]]]],[11,"from_str","","Parses a source and returns a table.",3,[[["str"]],["result",["configelement","error"]]]],[11,"from_source_with_init","","Updates the elements in this table with new values parsed from source. If an error occurs, the contents of this table are undefined. The source will be reset by this operation, and must not be used with any spans created from a previous lexing done with that source.",3,[[["self"],["source"]],["result",["error"]]]],[11,"from_str_with_init","","Updates the elements in this table with new values parsed from source. If an error occurs, the contents of this table are undefined.",3,[[["self"],["str"]],["result",["error"]]]],[11,"kind","","Returns the kind of this element.",3,[[["self"]],["configelementkind"]]],[11,"kind_mut","","Returns the kind of this element.",3,[[["self"]],["configelementkind"]]],[11,"span","","Returns the span associated with this element.",3,[[["self"]],["span"]]],[11,"as_table","","If this is a table, returns a pointer to its contents.",3,[[["self"]],["option",["btreemap"]]]],[11,"into_table","","If this is a table, returns its contents.",3,[[["self"]],["option",["btreemap"]]]],[11,"as_table_mut","","If this is a table, returns a pointer to its contents.",3,[[["self"]],["option",["btreemap"]]]],[11,"as_value","","If this is a value, returns a pointer to its contents.",3,[[["self"]],["option",["string"]]]],[11,"into_value","","If this is a value, returns its contents.",3,[[["self"]],["option",["string"]]]],[11,"as_value_mut","","If this is a value, returns a pointer to its contents.",3,[[["self"]],["option",["string"]]]],[11,"as_array","","If this is an array, returns a pointer to its contents.",3,[[["self"]],["option",["vec"]]]],[11,"into_array","","If this is an array, returns its contents.",3,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If this is an array, returns a pointer to its contents.",3,[[["self"]],["option",["vec"]]]],[11,"insert","","Insert an element into a table or an array. Panics if self is a value. `name` is ignored if self is an array.",3,[[["self"],["t"],["configelement"]]]],[11,"print","","Outputs the string representation of this element into into a printer.",3,[[["self"],["option",["str"]],["bool"],["printer"]],["result",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[8,"ElementRepr","","Describes a way to convert a type to a ConfigElement and back.",N,N],[10,"from_element","","Updates the contents of `self` based on values in the element.",4,[[["self"],["configelement"],["option",["source"]]],["result",["vec"]]]],[10,"to_element","","Creates an element that represents the contents of `self`.",4,[[["self"]],["configelement"]]],[14,"slr_def","","A macro to define the compile-time schemas for configuration elements. You can use this macro to define structs and enums, like so:",N,N],[11,"new","","",0,[[["errorkind"],["string"]],["error"]]],[11,"from_span","","Creates an error from a certain span of the source. The source argument, if set, must be set to the source that was used when the span was created.",0,[[["span"],["option",["source"]],["errorkind"],["str"]],["error"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",1,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",1,[[["self"],["errorkind"]],["bool"]]],[11,"custom","","",0,[[["t"]],["error"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"get_error","","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"custom","","",0,[[["t"]],["error"]]],[11,"next","","",5,[[["self"]],["option",["char"]]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"clone","","",1,[[["self"]],["errorkind"]]],[11,"clone","","",5,[[["self"]],["source"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"new","","",5,[[["path"],["str"]],["source"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"into_iter","","",5,[[["self"]],["i"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]]],"paths":[[3,"Error"],[4,"ErrorKind"],[4,"ConfigElementKind"],[3,"ConfigElement"],[8,"ElementRepr"],[3,"Source"]]};
searchIndex["slr_parser"]={"doc":"","items":[[3,"Span","slr_parser","Type representing a certain sub-section of the source.",N,N],[3,"Token","","",N,N],[12,"kind","","",0,N],[12,"span","","",0,N],[3,"Source","","Annotated representation of the configuration source string.",N,N],[3,"Lexer","","A type handling the lexing.",N,N],[12,"cur_token","","",1,N],[12,"next_token","","",1,N],[3,"Error","","The error type used throughout this crate.",N,N],[12,"kind","","",2,N],[12,"text","","",2,N],[3,"ConfigString","","",N,N],[12,"kind","","",3,N],[12,"span","","",3,N],[3,"Printer","","A utility type for printing a configuration element.",N,N],[4,"StringQuoteType","","",N,N],[13,"Naked","","",4,N],[13,"Quoted","","",4,N],[4,"TokenKind","","",N,N],[13,"EscapedString","","",5,N],[13,"RawString","","",5,N],[13,"Assign","","",5,N],[13,"LeftBracket","","",5,N],[13,"RightBracket","","",5,N],[13,"LeftBrace","","",5,N],[13,"RightBrace","","",5,N],[13,"Dollar","","",5,N],[13,"Comma","","",5,N],[13,"Tilde","","",5,N],[13,"Eof","","",5,N],[4,"ErrorKind","","An enum describing the kind of the error, to allow treating different errors differenly.",N,N],[13,"ParseFailure","","A parse error has occured. This error is not recoverable.",6,N],[13,"InvalidRepr","","An object could not be parsed from its ConfigElement representation. This error is recoverable, but the value the the object is in an unspecified state.",6,N],[13,"UnknownField","","While parsing a struct from a table, an unknown field was found. This error is recoverable, and the struct is unaffected.",6,N],[13,"Custom","","A custom error available to 3rd party implementors. The semantics are defined by the 3rd party.",6,N],[4,"StringKind","","",N,N],[13,"EscapedString","","",7,N],[13,"RawString","","",7,N],[5,"get_string_quote_type","","",N,[[["str"]],["stringquotetype"]]],[5,"parse_source","","",N,[[["source"],["v"]],["result",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["span"]]],[11,"new","","",8,[[],["span"]]],[11,"is_valid","","",8,[[["self"]],["bool"]]],[11,"combine","","",8,[[["self"],["span"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["token"]]],[11,"eq","","",5,[[["self"],["tokenkind"]],["bool"]]],[11,"ne","","",5,[[["self"],["tokenkind"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["tokenkind"]]],[11,"is_string","","",5,[[["self"]],["bool"]]],[11,"clone","","",9,[[["self"]],["source"]]],[11,"new","","",9,[[["path"],["str"]],["source"]]],[11,"next","","",9,[[["self"]],["option",["char"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["errorkind"]]],[11,"eq","","",6,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",6,[[["self"],["errorkind"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["error"]]],[11,"new","","",2,[[["errorkind"],["string"]],["error"]]],[11,"from_span","","Creates an error from a certain span of the source. The source argument, if set, must be set to the source that was used when the span was created.",2,[[["span"],["option",["source"]],["errorkind"],["str"]],["error"]]],[11,"custom","","",2,[[["t"]],["self"]]],[11,"custom","","",2,[[["t"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"new","","Creates a new lexer from a source. The source will be reset by this operation, and must not be used with any spans created from a previous lexing done with that source.",1,[[["source"]],["lexer"]]],[11,"get_source","","",1,[[["self"]],["source"]]],[11,"next","","",1,[[["self"]],["option",["result"]]]],[11,"clone","","",3,[[["self"]],["configstring"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["stringkind"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["stringkind"]],["bool"]]],[11,"ne","","",7,[[["self"],["stringkind"]],["bool"]]],[11,"append_to_string","","",3,[[["self"],["string"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"get_error","","",2,[[["self"]],["error"]]],[11,"new","","",10,[[["w"]],["printer"]]],[11,"value","","",10,[[["self"],["option",["str"]],["str"]],["result",["error"]]]],[11,"start_array","","",10,[[["self"],["option",["str"]],["bool"]],["result",["error"]]]],[11,"end_array","","",10,[[["self"]],["result",["error"]]]],[11,"start_table","","",10,[[["self"],["option",["str"]],["bool"],["bool"]],["result",["error"]]]],[11,"end_table","","",10,[[["self"],["bool"]],["result",["error"]]]],[8,"GetError","","",N,N],[10,"get_error","","",11,[[["self"]],["error"]]],[8,"Visitor","","",N,N],[10,"start_element","","",12,[[["self"],["source"],["configstring"]],["result"]]],[10,"end_element","","",12,[[["self"]],["result"]]],[10,"set_table","","",12,[[["self"],["source"],["span"]],["result"]]],[10,"set_array","","",12,[[["self"],["source"],["span"]],["result"]]],[10,"append_string","","",12,[[["self"],["source"],["configstring"]],["result"]]],[10,"expand","","",12,[[["self"],["source"],["configstring"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"into_iter","","",9,[[["self"]],["i"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]]],"paths":[[3,"Token"],[3,"Lexer"],[3,"Error"],[3,"ConfigString"],[4,"StringQuoteType"],[4,"TokenKind"],[4,"ErrorKind"],[4,"StringKind"],[3,"Span"],[3,"Source"],[3,"Printer"],[8,"GetError"],[8,"Visitor"]]};
searchIndex["syn"]={"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",N,N],[12,"style","","",0,N],[12,"value","","",0,N],[12,"is_sugared_doc","","",0,N],[3,"Field","","A field of a struct or enum variant.",N,N],[12,"ident","","Name of the field, if any.",1,N],[12,"vis","","Visibility of the field.",1,N],[12,"attrs","","Attributes tagged on the field.",1,N],[12,"ty","","Type of the field.",1,N],[3,"Variant","","An enum variant.",N,N],[12,"ident","","Name of the variant.",2,N],[12,"attrs","","Attributes tagged on the variant.",2,N],[12,"data","","Type of variant.",2,N],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,N],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",N,N],[12,"lifetimes","","",3,N],[12,"ty_params","","",3,N],[12,"where_clause","","",3,N],[3,"Lifetime","","",N,N],[12,"ident","","",4,N],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",N,N],[12,"attrs","","",5,N],[12,"lifetime","","",5,N],[12,"bounds","","",5,N],[3,"TyParam","","A generic type parameter, e.g. `T: Into<String>`.",N,N],[12,"attrs","","",6,N],[12,"ident","","",6,N],[12,"bounds","","",6,N],[12,"default","","",6,N],[3,"WhereBoundPredicate","","A type bound.",N,N],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,N],[12,"bounded_ty","","The type being bounded",7,N],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,N],[3,"WhereClause","","A `where` clause in a definition",N,N],[12,"predicates","","",8,N],[3,"WhereEqPredicate","","An equality predicate (unsupported).",N,N],[12,"lhs_ty","","",9,N],[12,"rhs_ty","","",9,N],[3,"WhereRegionPredicate","","A lifetime predicate.",N,N],[12,"lifetime","","",10,N],[12,"bounds","","",10,N],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",N,N],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",N,N],[3,"Ident","","",N,N],[3,"ByteStrLit","","",N,N],[12,"value","","",11,N],[12,"style","","",11,N],[3,"FloatLit","","",N,N],[12,"value","","",12,N],[12,"suffix","","",12,N],[3,"IntLit","","",N,N],[12,"value","","",13,N],[12,"suffix","","",13,N],[3,"StrLit","","",N,N],[12,"value","","",14,N],[12,"style","","",14,N],[3,"Delimited","","",N,N],[12,"delim","","The type of delimiter",15,N],[12,"tts","","The delimited sequence of token trees",15,N],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",N,N],[12,"path","","",16,N],[12,"tts","","",16,N],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",N,N],[12,"ident","","Name of the struct or enum.",17,N],[12,"vis","","Visibility of the struct or enum.",17,N],[12,"attrs","","Attributes tagged on the whole struct or enum.",17,N],[12,"generics","","Generics required to complete the definition.",17,N],[12,"body","","Data within the struct or enum.",17,N],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",N,N],[12,"lifetimes","","The lifetime parameters for this path segment.",18,N],[12,"types","","The type parameters for this path segment, if present.",18,N],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,N],[3,"BareFnArg","","An argument in a function type.",N,N],[12,"name","","",19,N],[12,"ty","","",19,N],[3,"BareFnTy","","",N,N],[12,"unsafety","","",20,N],[12,"abi","","",20,N],[12,"lifetimes","","",20,N],[12,"inputs","","",20,N],[12,"output","","",20,N],[12,"variadic","","",20,N],[3,"MutTy","","",N,N],[12,"ty","","",21,N],[12,"mutability","","",21,N],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",N,N],[12,"inputs","","`(A, B)`",22,N],[12,"output","","`C`",22,N],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",N,N],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",23,N],[12,"segments","","The segments in the path: the things separated by `::`.",23,N],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",N,N],[12,"ident","","The identifier portion of this path segment.",24,N],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",24,N],[3,"PolyTraitRef","","",N,N],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",25,N],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",25,N],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",N,N],[12,"ty","","",26,N],[12,"position","","",26,N],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",N,N],[12,"ident","","",27,N],[12,"ty","","",27,N],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",N,N],[13,"Outer","","Attribute of the form `#![...]`.",28,N],[13,"Inner","","Attribute of the form `#[...]`.",28,N],[4,"MetaItem","","A compile-time attribute item.",N,N],[13,"Word","","Word meta item.",29,N],[13,"List","","List meta item.",29,N],[13,"NameValue","","Name-value meta item.",29,N],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",N,N],[13,"MetaItem","","A full `MetaItem`.",30,N],[13,"Literal","","A Rust literal.",30,N],[4,"ConstExpr","","",N,N],[13,"Call","","A function call",31,N],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",31,N],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",31,N],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",31,N],[13,"Cast","","A cast (`foo as f64`)",31,N],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",31,N],[13,"Index","","An indexing operation (`foo[2]`)",31,N],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",31,N],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",31,N],[4,"VariantData","","Data stored within an enum variant or struct.",N,N],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",32,N],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",32,N],[13,"Unit","","Unit variant, e.g. `None`.",32,N],[4,"Visibility","","Visibility level of an item.",N,N],[13,"Public","","Public, i.e. `pub`.",33,N],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",33,N],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",33,N],[13,"Inherited","","Inherited, i.e. private.",33,N],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",N,N],[13,"None","","",34,N],[13,"Maybe","","",34,N],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",N,N],[13,"Trait","","",35,N],[13,"Region","","",35,N],[4,"WherePredicate","","A single predicate in a `where` clause",N,N],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",36,N],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",36,N],[13,"EqPredicate","","An equality predicate (unsupported)",36,N],[4,"FloatTy","","",N,N],[13,"F32","","",37,N],[13,"F64","","",37,N],[13,"Unsuffixed","","",37,N],[4,"IntTy","","",N,N],[13,"Isize","","",38,N],[13,"I8","","",38,N],[13,"I16","","",38,N],[13,"I32","","",38,N],[13,"I64","","",38,N],[13,"Usize","","",38,N],[13,"U8","","",38,N],[13,"U16","","",38,N],[13,"U32","","",38,N],[13,"U64","","",38,N],[13,"Unsuffixed","","",38,N],[4,"Lit","","Literal kind.",N,N],[13,"Str","","A string literal (`\"foo\"`)",39,N],[13,"ByteStr","","A byte string (`b\"foo\"`)",39,N],[13,"Byte","","A byte char (`b'f'`)",39,N],[13,"Char","","A character literal (`'a'`)",39,N],[13,"Int","","An integer literal (`1`)",39,N],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",39,N],[13,"Bool","","A boolean literal",39,N],[4,"StrStyle","","",N,N],[13,"Cooked","","A regular string, like `\"foo\"`",40,N],[13,"Raw","","A raw string, like `r##\"foo\"##`",40,N],[4,"BinOpToken","","",N,N],[13,"Plus","","",41,N],[13,"Minus","","",41,N],[13,"Star","","",41,N],[13,"Slash","","",41,N],[13,"Percent","","",41,N],[13,"Caret","","",41,N],[13,"And","","",41,N],[13,"Or","","",41,N],[13,"Shl","","",41,N],[13,"Shr","","",41,N],[4,"DelimToken","","A delimiter token",N,N],[13,"Paren","","A round parenthesis: `(` or `)`",42,N],[13,"Bracket","","A square bracket: `[` or `]`",42,N],[13,"Brace","","A curly brace: `{` or `}`",42,N],[4,"Token","","",N,N],[13,"Eq","","",43,N],[13,"Lt","","",43,N],[13,"Le","","",43,N],[13,"EqEq","","",43,N],[13,"Ne","","",43,N],[13,"Ge","","",43,N],[13,"Gt","","",43,N],[13,"AndAnd","","",43,N],[13,"OrOr","","",43,N],[13,"Not","","",43,N],[13,"Tilde","","",43,N],[13,"BinOp","","",43,N],[13,"BinOpEq","","",43,N],[13,"At","","",43,N],[13,"Dot","","",43,N],[13,"DotDot","","",43,N],[13,"DotDotDot","","",43,N],[13,"Comma","","",43,N],[13,"Semi","","",43,N],[13,"Colon","","",43,N],[13,"ModSep","","",43,N],[13,"RArrow","","",43,N],[13,"LArrow","","",43,N],[13,"FatArrow","","",43,N],[13,"Pound","","",43,N],[13,"Dollar","","",43,N],[13,"Question","","",43,N],[13,"Literal","","",43,N],[13,"Ident","","",43,N],[13,"Underscore","","",43,N],[13,"Lifetime","","",43,N],[13,"DocComment","","",43,N],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",N,N],[13,"Token","","A single token",44,N],[13,"Delimited","","A delimited sequence of token trees",44,N],[4,"Body","","Body of a derived struct or enum.",N,N],[13,"Enum","","It's an enum.",45,N],[13,"Struct","","It's a struct.",45,N],[4,"BinOp","","",N,N],[13,"Add","","The `+` operator (addition)",46,N],[13,"Sub","","The `-` operator (subtraction)",46,N],[13,"Mul","","The `*` operator (multiplication)",46,N],[13,"Div","","The `/` operator (division)",46,N],[13,"Rem","","The `%` operator (modulus)",46,N],[13,"And","","The `&&` operator (logical and)",46,N],[13,"Or","","The `||` operator (logical or)",46,N],[13,"BitXor","","The `^` operator (bitwise xor)",46,N],[13,"BitAnd","","The `&` operator (bitwise and)",46,N],[13,"BitOr","","The `|` operator (bitwise or)",46,N],[13,"Shl","","The `<<` operator (shift left)",46,N],[13,"Shr","","The `>>` operator (shift right)",46,N],[13,"Eq","","The `==` operator (equality)",46,N],[13,"Lt","","The `<` operator (less than)",46,N],[13,"Le","","The `<=` operator (less than or equal to)",46,N],[13,"Ne","","The `!=` operator (not equal to)",46,N],[13,"Ge","","The `>=` operator (greater than or equal to)",46,N],[13,"Gt","","The `>` operator (greater than)",46,N],[4,"UnOp","","",N,N],[13,"Deref","","The `*` operator for dereferencing",47,N],[13,"Not","","The `!` operator for logical inversion",47,N],[13,"Neg","","The `-` operator for negation",47,N],[4,"Abi","","",N,N],[13,"Named","","",48,N],[13,"Rust","","",48,N],[4,"FunctionRetTy","","",N,N],[13,"Default","","Return type is not specified.",49,N],[13,"Ty","","Everything else",49,N],[4,"Mutability","","",N,N],[13,"Mutable","","",50,N],[13,"Immutable","","",50,N],[4,"PathParameters","","Parameters of a path segment.",N,N],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",51,N],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",51,N],[4,"Ty","","The different kinds of types recognized by the compiler",N,N],[13,"Slice","","A variable-length array (`[T]`)",52,N],[13,"Array","","A fixed length array (`[T; n]`)",52,N],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",52,N],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",52,N],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",52,N],[13,"Never","","The never type (`!`)",52,N],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",52,N],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",52,N],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",52,N],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",52,N],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",52,N],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",52,N],[13,"Mac","","A macro in the type position.",52,N],[4,"Unsafety","","",N,N],[13,"Unsafe","","",53,N],[13,"Normal","","",53,N],[5,"parse_derive_input","","",N,[[["str"]],["result",["deriveinput","string"]]]],[5,"parse_type","","",N,[[["str"]],["result",["ty","string"]]]],[5,"parse_path","","",N,[[["str"]],["result",["path","string"]]]],[5,"parse_where_clause","","",N,[[["str"]],["result",["whereclause","string"]]]],[5,"parse_token_trees","","",N,[[["str"]],["result",["vec","string"]]]],[5,"parse_ident","","",N,[[["str"]],["result",["ident","string"]]]],[5,"parse_ty_param_bound","","",N,[[["str"]],["result",["typarambound","string"]]]],[5,"parse_outer_attr","","",N,[[["str"]],["result",["attribute","string"]]]],[11,"to_tokens","","",0,[[["self"],["tokens"]]]],[11,"to_tokens","","",29,[[["self"],["tokens"]]]],[11,"to_tokens","","",30,[[["self"],["tokens"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["attribute"]]],[11,"eq","","",0,[[["self"],["attribute"]],["bool"]]],[11,"ne","","",0,[[["self"],["attribute"]],["bool"]]],[11,"hash","","",0,N],[11,"name","","",0,[[["self"]],["str"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"clone","","",28,[[["self"]],["attrstyle"]]],[11,"eq","","",28,[[["self"],["attrstyle"]],["bool"]]],[11,"hash","","",28,N],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"clone","","",29,[[["self"]],["metaitem"]]],[11,"eq","","",29,[[["self"],["metaitem"]],["bool"]]],[11,"ne","","",29,[[["self"],["metaitem"]],["bool"]]],[11,"hash","","",29,N],[11,"name","","Name of the item.",29,[[["self"]],["str"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"clone","","",30,[[["self"]],["nestedmetaitem"]]],[11,"eq","","",30,[[["self"],["nestedmetaitem"]],["bool"]]],[11,"ne","","",30,[[["self"],["nestedmetaitem"]],["bool"]]],[11,"hash","","",30,N],[11,"to_tokens","","",31,[[["self"],["tokens"]]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"clone","","",31,[[["self"]],["constexpr"]]],[11,"eq","","",31,[[["self"],["constexpr"]],["bool"]]],[11,"ne","","",31,[[["self"],["constexpr"]],["bool"]]],[11,"hash","","",31,N],[11,"to_tokens","","",2,[[["self"],["tokens"]]]],[11,"to_tokens","","",32,[[["self"],["tokens"]]]],[11,"to_tokens","","",1,[[["self"],["tokens"]]]],[11,"to_tokens","","",33,[[["self"],["tokens"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["variant"]]],[11,"eq","","",2,[[["self"],["variant"]],["bool"]]],[11,"ne","","",2,[[["self"],["variant"]],["bool"]]],[11,"hash","","",2,N],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"clone","","",32,[[["self"]],["variantdata"]]],[11,"eq","","",32,[[["self"],["variantdata"]],["bool"]]],[11,"ne","","",32,[[["self"],["variantdata"]],["bool"]]],[11,"hash","","",32,N],[11,"fields","","Slice containing the fields stored in the variant.",32,N],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",32,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["field"]]],[11,"eq","","",1,[[["self"],["field"]],["bool"]]],[11,"ne","","",1,[[["self"],["field"]],["bool"]]],[11,"hash","","",1,N],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"clone","","",33,[[["self"]],["visibility"]]],[11,"eq","","",33,[[["self"],["visibility"]],["bool"]]],[11,"ne","","",33,[[["self"],["visibility"]],["bool"]]],[11,"hash","","",33,N],[11,"to_tokens","","",3,[[["self"],["tokens"]]]],[11,"to_tokens","","",54,[[["self"],["tokens"]]]],[11,"to_tokens","","",55,[[["self"],["tokens"]]]],[11,"to_tokens","","",56,[[["self"],["tokens"]]]],[11,"to_tokens","","",4,[[["self"],["tokens"]]]],[11,"to_tokens","","",5,[[["self"],["tokens"]]]],[11,"to_tokens","","",6,[[["self"],["tokens"]]]],[11,"to_tokens","","",35,[[["self"],["tokens"]]]],[11,"to_tokens","","",8,[[["self"],["tokens"]]]],[11,"to_tokens","","",36,[[["self"],["tokens"]]]],[11,"to_tokens","","",7,[[["self"],["tokens"]]]],[11,"to_tokens","","",10,[[["self"],["tokens"]]]],[11,"to_tokens","","",9,[[["self"],["tokens"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["generics"]]],[11,"eq","","",3,[[["self"],["generics"]],["bool"]]],[11,"ne","","",3,[[["self"],["generics"]],["bool"]]],[11,"default","","",3,[[],["generics"]]],[11,"hash","","",3,N],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,N],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",55,[[["self"]],["turbofish"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["lifetime"]]],[11,"eq","","",4,[[["self"],["lifetime"]],["bool"]]],[11,"ne","","",4,[[["self"],["lifetime"]],["bool"]]],[11,"hash","","",4,N],[11,"cmp","","",4,[[["self"],["lifetime"]],["ordering"]]],[11,"partial_cmp","","",4,[[["self"],["lifetime"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["lifetime"]],["bool"]]],[11,"le","","",4,[[["self"],["lifetime"]],["bool"]]],[11,"gt","","",4,[[["self"],["lifetime"]],["bool"]]],[11,"ge","","",4,[[["self"],["lifetime"]],["bool"]]],[11,"new","","",4,[[["t"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["lifetimedef"]]],[11,"eq","","",5,[[["self"],["lifetimedef"]],["bool"]]],[11,"ne","","",5,[[["self"],["lifetimedef"]],["bool"]]],[11,"hash","","",5,N],[11,"new","","",5,[[["t"]],["self"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["typaram"]]],[11,"eq","","",6,[[["self"],["typaram"]],["bool"]]],[11,"ne","","",6,[[["self"],["typaram"]],["bool"]]],[11,"hash","","",6,N],[11,"from","","",6,[[["ident"]],["self"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"clone","","",35,[[["self"]],["typarambound"]]],[11,"eq","","",35,[[["self"],["typarambound"]],["bool"]]],[11,"ne","","",35,[[["self"],["typarambound"]],["bool"]]],[11,"hash","","",35,N],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"clone","","",34,[[["self"]],["traitboundmodifier"]]],[11,"eq","","",34,[[["self"],["traitboundmodifier"]],["bool"]]],[11,"hash","","",34,N],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["whereclause"]]],[11,"eq","","",8,[[["self"],["whereclause"]],["bool"]]],[11,"ne","","",8,[[["self"],["whereclause"]],["bool"]]],[11,"default","","",8,[[],["whereclause"]]],[11,"hash","","",8,N],[11,"none","","",8,[[],["self"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"clone","","",36,[[["self"]],["wherepredicate"]]],[11,"eq","","",36,[[["self"],["wherepredicate"]],["bool"]]],[11,"ne","","",36,[[["self"],["wherepredicate"]],["bool"]]],[11,"hash","","",36,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["whereboundpredicate"]]],[11,"eq","","",7,[[["self"],["whereboundpredicate"]],["bool"]]],[11,"ne","","",7,[[["self"],["whereboundpredicate"]],["bool"]]],[11,"hash","","",7,N],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["whereregionpredicate"]]],[11,"eq","","",10,[[["self"],["whereregionpredicate"]],["bool"]]],[11,"ne","","",10,[[["self"],["whereregionpredicate"]],["bool"]]],[11,"hash","","",10,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["whereeqpredicate"]]],[11,"eq","","",9,[[["self"],["whereeqpredicate"]],["bool"]]],[11,"ne","","",9,[[["self"],["whereeqpredicate"]],["bool"]]],[11,"hash","","",9,N],[11,"to_tokens","","",57,[[["self"],["tokens"]]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"clone","","",57,[[["self"]],["ident"]]],[11,"hash","","",57,N],[11,"cmp","","",57,[[["self"],["ident"]],["ordering"]]],[11,"partial_cmp","","",57,[[["self"],["ident"]],["option",["ordering"]]]],[11,"lt","","",57,[[["self"],["ident"]],["bool"]]],[11,"le","","",57,[[["self"],["ident"]],["bool"]]],[11,"gt","","",57,[[["self"],["ident"]],["bool"]]],[11,"ge","","",57,[[["self"],["ident"]],["bool"]]],[11,"new","","",57,[[["t"]],["self"]]],[11,"from","","",57,[[["str"]],["self"]]],[11,"from","","",57,[[["cow",["str"]]],["self"]]],[11,"from","","",57,[[["string"]],["self"]]],[11,"from","","",57,[[["usize"]],["self"]]],[11,"as_ref","","",57,[[["self"]],["str"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",57,[[["self"],["t"]],["bool"]]],[11,"to_tokens","","",39,[[["self"],["tokens"]]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"clone","","",39,[[["self"]],["lit"]]],[11,"eq","","",39,[[["self"],["lit"]],["bool"]]],[11,"ne","","",39,[[["self"],["lit"]],["bool"]]],[11,"hash","","",39,N],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"clone","","",40,[[["self"]],["strstyle"]]],[11,"eq","","",40,[[["self"],["strstyle"]],["bool"]]],[11,"ne","","",40,[[["self"],["strstyle"]],["bool"]]],[11,"hash","","",40,N],[11,"from","","",39,[[["string"]],["lit"]]],[11,"from","","",39,[[["str"]],["lit"]]],[11,"from","","",39,[[["vec",["u8"]]],["lit"]]],[11,"from","","",39,N],[11,"from","","",39,[[["char"]],["lit"]]],[11,"from","","",39,[[["bool"]],["lit"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"clone","","",38,[[["self"]],["intty"]]],[11,"eq","","",38,[[["self"],["intty"]],["bool"]]],[11,"hash","","",38,N],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"clone","","",37,[[["self"]],["floatty"]]],[11,"eq","","",37,[[["self"],["floatty"]],["bool"]]],[11,"hash","","",37,N],[11,"from","","",39,[[["isize"]],["lit"]]],[11,"from","","",39,[[["i8"]],["lit"]]],[11,"from","","",39,[[["i16"]],["lit"]]],[11,"from","","",39,[[["i32"]],["lit"]]],[11,"from","","",39,[[["i64"]],["lit"]]],[11,"from","","",39,[[["usize"]],["lit"]]],[11,"from","","",39,[[["u8"]],["lit"]]],[11,"from","","",39,[[["u16"]],["lit"]]],[11,"from","","",39,[[["u32"]],["lit"]]],[11,"from","","",39,[[["u64"]],["lit"]]],[11,"from","","",39,[[["f32"]],["lit"]]],[11,"from","","",39,[[["f64"]],["lit"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["strlit"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["bytestrlit"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["intlit"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["floatlit"]]],[11,"to_tokens","","",16,[[["self"],["tokens"]]]],[11,"to_tokens","","",44,[[["self"],["tokens"]]]],[11,"to_tokens","","",15,[[["self"],["tokens"]]]],[11,"to_tokens","","",43,[[["self"],["tokens"]]]],[11,"to_tokens","","",41,[[["self"],["tokens"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["mac"]]],[11,"eq","","",16,[[["self"],["mac"]],["bool"]]],[11,"ne","","",16,[[["self"],["mac"]],["bool"]]],[11,"hash","","",16,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"clone","","",44,[[["self"]],["tokentree"]]],[11,"eq","","",44,[[["self"],["tokentree"]],["bool"]]],[11,"ne","","",44,[[["self"],["tokentree"]],["bool"]]],[11,"hash","","",44,N],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["delimited"]]],[11,"eq","","",15,[[["self"],["delimited"]],["bool"]]],[11,"ne","","",15,[[["self"],["delimited"]],["bool"]]],[11,"hash","","",15,N],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["token"]]],[11,"eq","","",43,[[["self"],["token"]],["bool"]]],[11,"ne","","",43,[[["self"],["token"]],["bool"]]],[11,"hash","","",43,N],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"clone","","",41,[[["self"]],["binoptoken"]]],[11,"eq","","",41,[[["self"],["binoptoken"]],["bool"]]],[11,"hash","","",41,N],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"clone","","",42,[[["self"]],["delimtoken"]]],[11,"eq","","",42,[[["self"],["delimtoken"]],["bool"]]],[11,"hash","","",42,N],[11,"to_tokens","","",17,[[["self"],["tokens"]]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["deriveinput"]]],[11,"eq","","",17,[[["self"],["deriveinput"]],["bool"]]],[11,"ne","","",17,[[["self"],["deriveinput"]],["bool"]]],[11,"hash","","",17,N],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"clone","","",45,[[["self"]],["body"]]],[11,"eq","","",45,[[["self"],["body"]],["bool"]]],[11,"ne","","",45,[[["self"],["body"]],["bool"]]],[11,"hash","","",45,N],[11,"op","","",46,[[["self"]],["str"]]],[11,"assign_op","","",46,[[["self"]],["option",["str"]]]],[11,"to_tokens","","",46,[[["self"],["tokens"]]]],[11,"op","","",47,[[["self"]],["str"]]],[11,"to_tokens","","",47,[[["self"],["tokens"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"clone","","",46,[[["self"]],["binop"]]],[11,"eq","","",46,[[["self"],["binop"]],["bool"]]],[11,"hash","","",46,N],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"clone","","",47,[[["self"]],["unop"]]],[11,"eq","","",47,[[["self"],["unop"]],["bool"]]],[11,"hash","","",47,N],[11,"to_tokens","","",52,[[["self"],["tokens"]]]],[11,"to_tokens","","",50,[[["self"],["tokens"]]]],[11,"to_tokens","","",23,[[["self"],["tokens"]]]],[11,"to_tokens","","",24,[[["self"],["tokens"]]]],[11,"to_tokens","","",51,[[["self"],["tokens"]]]],[11,"to_tokens","","",18,[[["self"],["tokens"]]]],[11,"to_tokens","","",27,[[["self"],["tokens"]]]],[11,"to_tokens","","",22,[[["self"],["tokens"]]]],[11,"to_tokens","","",25,[[["self"],["tokens"]]]],[11,"to_tokens","","",20,[[["self"],["tokens"]]]],[11,"to_tokens","","",19,[[["self"],["tokens"]]]],[11,"to_tokens","","",53,[[["self"],["tokens"]]]],[11,"to_tokens","","",48,[[["self"],["tokens"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"clone","","",52,[[["self"]],["ty"]]],[11,"eq","","",52,[[["self"],["ty"]],["bool"]]],[11,"ne","","",52,[[["self"],["ty"]],["bool"]]],[11,"hash","","",52,N],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["mutty"]]],[11,"eq","","",21,[[["self"],["mutty"]],["bool"]]],[11,"ne","","",21,[[["self"],["mutty"]],["bool"]]],[11,"hash","","",21,N],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"clone","","",50,[[["self"]],["mutability"]]],[11,"eq","","",50,[[["self"],["mutability"]],["bool"]]],[11,"hash","","",50,N],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["path"]]],[11,"eq","","",23,[[["self"],["path"]],["bool"]]],[11,"ne","","",23,[[["self"],["path"]],["bool"]]],[11,"hash","","",23,N],[11,"from","","",23,[[["t"]],["self"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",24,[[["self"]],["pathsegment"]]],[11,"eq","","",24,[[["self"],["pathsegment"]],["bool"]]],[11,"ne","","",24,[[["self"],["pathsegment"]],["bool"]]],[11,"hash","","",24,N],[11,"from","","",24,[[["t"]],["self"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["pathparameters"]]],[11,"eq","","",51,[[["self"],["pathparameters"]],["bool"]]],[11,"ne","","",51,[[["self"],["pathparameters"]],["bool"]]],[11,"hash","","",51,N],[11,"none","","",51,[[],["self"]]],[11,"is_empty","","",51,[[["self"]],["bool"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["anglebracketedparameterdata"]]],[11,"eq","","",18,[[["self"],["anglebracketedparameterdata"]],["bool"]]],[11,"ne","","",18,[[["self"],["anglebracketedparameterdata"]],["bool"]]],[11,"default","","",18,[[],["anglebracketedparameterdata"]]],[11,"hash","","",18,N],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["typebinding"]]],[11,"eq","","",27,[[["self"],["typebinding"]],["bool"]]],[11,"ne","","",27,[[["self"],["typebinding"]],["bool"]]],[11,"hash","","",27,N],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["parenthesizedparameterdata"]]],[11,"eq","","",22,[[["self"],["parenthesizedparameterdata"]],["bool"]]],[11,"ne","","",22,[[["self"],["parenthesizedparameterdata"]],["bool"]]],[11,"hash","","",22,N],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",25,[[["self"]],["polytraitref"]]],[11,"eq","","",25,[[["self"],["polytraitref"]],["bool"]]],[11,"ne","","",25,[[["self"],["polytraitref"]],["bool"]]],[11,"hash","","",25,N],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["qself"]]],[11,"eq","","",26,[[["self"],["qself"]],["bool"]]],[11,"ne","","",26,[[["self"],["qself"]],["bool"]]],[11,"hash","","",26,N],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["barefnty"]]],[11,"eq","","",20,[[["self"],["barefnty"]],["bool"]]],[11,"ne","","",20,[[["self"],["barefnty"]],["bool"]]],[11,"hash","","",20,N],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"clone","","",53,[[["self"]],["unsafety"]]],[11,"eq","","",53,[[["self"],["unsafety"]],["bool"]]],[11,"hash","","",53,N],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"clone","","",48,[[["self"]],["abi"]]],[11,"eq","","",48,[[["self"],["abi"]],["bool"]]],[11,"ne","","",48,[[["self"],["abi"]],["bool"]]],[11,"hash","","",48,N],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["barefnarg"]]],[11,"eq","","",19,[[["self"],["barefnarg"]],["bool"]]],[11,"ne","","",19,[[["self"],["barefnarg"]],["bool"]]],[11,"hash","","",19,N],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",49,[[["self"]],["functionretty"]]],[11,"eq","","",49,[[["self"],["functionretty"]],["bool"]]],[11,"ne","","",49,[[["self"],["functionretty"]],["bool"]]],[11,"hash","","",49,N],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",N,N],[5,"walk_opt_ident","syn::visit","",N,[[["v"],["option"]]]],[5,"walk_lifetime_def","","",N,[[["v"],["lifetimedef"]]]],[5,"walk_poly_trait_ref","","",N,[[["v"],["polytraitref"],["traitboundmodifier"]]]],[5,"walk_derive_input","","",N,[[["v"],["deriveinput"]]]],[5,"walk_variant","","",N,[[["v"],["variant"],["generics"]]]],[5,"walk_ty","","",N,[[["v"],["ty"]]]],[5,"walk_path","","",N,[[["v"],["path"]]]],[5,"walk_path_segment","","",N,[[["v"],["pathsegment"]]]],[5,"walk_path_parameters","","",N,[[["v"],["pathparameters"]]]],[5,"walk_assoc_type_binding","","",N,[[["v"],["typebinding"]]]],[5,"walk_ty_param_bound","","",N,[[["v"],["typarambound"]]]],[5,"walk_generics","","",N,[[["v"],["generics"]]]],[5,"walk_fn_ret_ty","","",N,[[["v"],["functionretty"]]]],[5,"walk_variant_data","","",N,[[["v"],["variantdata"]]]],[5,"walk_field","","",N,[[["v"],["field"]]]],[5,"walk_const_expr","","",N,[[["v"],["constexpr"]]]],[5,"walk_mac","","",N,[[["v"],["mac"]]]],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",N,N],[11,"visit_ident","","",58,[[["self"],["ident"]]]],[11,"visit_derive_input","","",58,[[["self"],["deriveinput"]]]],[11,"visit_ty","","",58,[[["self"],["ty"]]]],[11,"visit_generics","","",58,[[["self"],["generics"]]]],[11,"visit_ty_param_bound","","",58,[[["self"],["typarambound"]]]],[11,"visit_poly_trait_ref","","",58,[[["self"],["polytraitref"],["traitboundmodifier"]]]],[11,"visit_variant_data","","",58,[[["self"],["variantdata"],["ident"],["generics"]]]],[11,"visit_field","","",58,[[["self"],["field"]]]],[11,"visit_variant","","",58,[[["self"],["variant"],["generics"]]]],[11,"visit_lifetime","","",58,[[["self"],["lifetime"]]]],[11,"visit_lifetime_def","","",58,[[["self"],["lifetimedef"]]]],[11,"visit_path","","",58,[[["self"],["path"]]]],[11,"visit_path_segment","","",58,[[["self"],["pathsegment"]]]],[11,"visit_path_parameters","","",58,[[["self"],["pathparameters"]]]],[11,"visit_assoc_type_binding","","",58,[[["self"],["typebinding"]]]],[11,"visit_attribute","","",58,[[["self"],["attribute"]]]],[11,"visit_fn_ret_ty","","",58,[[["self"],["functionretty"]]]],[11,"visit_const_expr","","",58,[[["self"],["constexpr"]]]],[11,"visit_lit","","",58,[[["self"],["lit"]]]],[11,"visit_mac","","",58,[[["self"],["mac"]]]],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",N,N],[4,"IResult","syn::parse","The result of a parser.",N,N],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",59,N],[13,"Error","","Parsing failed.",59,N],[5,"lit","","",N,[[["str"]],["iresult",["str","lit"]]]],[5,"string","","",N,[[["str"]],["iresult",["str","strlit"]]]],[5,"byte_string","","",N,[[["str"]],["iresult",["str","bytestrlit"]]]],[5,"byte","","",N,[[["str"]],["iresult",["str","u8"]]]],[5,"character","","",N,[[["str"]],["iresult",["str","char"]]]],[5,"float","","",N,[[["str"]],["iresult",["str","floatlit"]]]],[5,"int","","",N,[[["str"]],["iresult",["str","intlit"]]]],[5,"boolean","","",N,[[["str"]],["iresult",["str","bool"]]]],[5,"ty","","",N,[[["str"]],["iresult",["str","ty"]]]],[5,"path","","",N,[[["str"]],["iresult",["str","path"]]]],[5,"tt","","",N,[[["str"]],["iresult",["str","tokentree"]]]],[5,"ident","","",N,[[["str"]],["iresult",["str","ident"]]]],[5,"lifetime","","",N,[[["str"]],["iresult",["str","lifetime"]]]],[11,"into","syn","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"into","","",54,[[["self"]],["u"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"get_type_id","","",54,[[["self"]],["typeid"]]],[11,"try_into","","",54,[[["self"]],["result"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"into","","",57,[[["self"]],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,N],[11,"to_string","","",57,[[["self"]],["string"]]],[11,"from","","",57,[[["t"]],["t"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"get_type_id","","",57,[[["self"]],["typeid"]]],[11,"try_into","","",57,[[["self"]],["result"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,N],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,N],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,N],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"into","","",30,[[["self"]],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,N],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,N],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,N],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,N],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"to_string","","",37,[[["self"]],["string"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"to_string","","",38,[[["self"]],["string"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,N],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,N],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,N],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,N],[11,"from","","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,N],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,N],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,N],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"to_owned","","",51,[[["self"]],["t"]]],[11,"clone_into","","",51,N],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,N],[11,"from","","",52,[[["t"]],["t"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"into","","",53,[[["self"]],["u"]]],[11,"to_owned","","",53,[[["self"]],["t"]]],[11,"clone_into","","",53,N],[11,"from","","",53,[[["t"]],["t"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"get_type_id","","",53,[[["self"]],["typeid"]]],[11,"try_into","","",53,[[["self"]],["result"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"expect","syn::parse","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",59,[[["self"],["str"]],["o"]]],[11,"into","","",59,[[["self"]],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,N],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"get_type_id","","",59,[[["self"]],["typeid"]]],[11,"try_into","","",59,[[["self"]],["result"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"eq","","",59,[[["self"],["iresult"]],["bool"]]],[11,"ne","","",59,[[["self"],["iresult"]],["bool"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",59,[[["self"]],["iresult"]]]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"]={"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",N,N],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,N],[13,"Error","","Parsing failed.",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["iresult"]],["bool"]]],[11,"ne","","",0,[[["self"],["iresult"]],["bool"]]],[11,"clone","","",0,[[["self"]],["iresult"]]],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,[[["self"],["str"]],["o"]]],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",N,N],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",N,N],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",N,N],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",N,N],[14,"epsilon","","Parses nothing and always succeeds.",N,N],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",N,N],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",N,N],[14,"named","","Define a function from a parser combination.",N,N],[14,"call","","Invoke the given parser function with the passed in arguments.",N,N],[14,"map","","Transform the result of a parser by applying a function or closure.",N,N],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",N,N],[14,"cond","","Conditionally execute the given parser.",N,N],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",N,N],[14,"preceded","","Parse two things, returning the value of the second.",N,N],[14,"terminated","","Parse two things, returning the value of the first.",N,N],[14,"many0","","Parse zero or more values using the given parser.",N,N],[14,"peek","","Parse a value without consuming it from the input data.",N,N],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",N,N],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",N,N],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",N,N],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",N,N],[14,"delimited","","Value surrounded by a pair of delimiters.",N,N],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",N,N],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",N,N],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",N,N],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",N,N],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]]],"paths":[[4,"IResult"]]};
searchIndex["unicode_xid"]={"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",N,N],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",N,N],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,[[["self"]],["bool"]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,[[["self"]],["bool"]]]],"paths":[[8,"UnicodeXID"]]};
initSearch(searchIndex);
